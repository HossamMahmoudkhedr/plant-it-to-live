# -*- coding: utf-8 -*-
"""crop recommendation (Random Forest)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rmi7LJpGBNGEWR5qNy8IvMYd06j87Wwy
"""

# Importing libraries

from __future__ import print_function
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import tree
import warnings
warnings.filterwarnings('ignore')

!pip install --upgrade scikit-learn

import sklearn
print(sklearn.__version__)

pip install scikit-learn==1.4.2

dataset= pd.read_csv("Crop_recommendation.csv")

dataset.head()

dataset.tail()

print(dataset.size)
print(dataset.shape)

dataset.columns

dataset['label'].unique()

numeric_dataset = dataset.select_dtypes(include=[np.number])
sns.heatmap(numeric_dataset.corr(), annot=True)

features =dataset[['N', 'P','K','temperature', 'humidity', 'ph', 'rainfall']]
target = dataset['label']
labels = dataset['label']
acc = []
model = []

Xtrain, Xtest, Ytrain, Ytest = train_test_split(features,target,test_size = 0.2,random_state =2)

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(Xtrain,Ytrain)

predicted_values = RF.predict(Xtest)

x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('RF')
print("the Accuracy is: ", x)

print(classification_report(Ytest,predicted_values))

# Cross validation score (Random Forest)
from sklearn.model_selection import cross_val_score
score = cross_val_score(RF,features,target,cv=5)
score

import joblib
saved_model = 'RandomForest.pkl'
joblib.dump(RF, saved_model)

# Load the model using joblib
RF_Model = joblib.load(saved_model)

RF_Model = joblib.load(saved_model)

import pickle
# Dump the trained Naive Bayes classifier with Pickle
saved_model= 'RandomForest1.pkl'
# Open the file to save as pkl file
RF_Model_pkl = open(saved_model, 'wb')
pickle.dump(RF, RF_Model_pkl)
# Close the pickle instances
RF_Model_pkl.close()